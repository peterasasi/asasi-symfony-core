<?php

namespace Dbh\SfCoreBundle\Common;

use by\component\paging\vo\PagingParams;
use by\component\string_extend\helper\StringHelper;
use by\infrastructure\base\CallResult;
use by\infrastructure\helper\CallResultHelper;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\QueryBuilder;

abstract class BaseRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry, $entityClass)
    {
        parent::__construct($registry, $entityClass);
    }

    public function getLastSql()
    {
        return 'Not Implement';
    }

    /**
     * 添加并自动持久化
     * @param $entity
     * @param bool $noFlush
     * @return mixed
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function add($entity, $noFlush = false)
    {
        $this->getEntityManager()->persist($entity);
        if (!$noFlush) {
            $this->getEntityManager()->flush($entity);
        }
        return $entity;
    }

    /**
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function getEntityManager()
    {
        return parent::getEntityManager();
    }

    /**
     * 持久化删除
     * @param $entity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete($entity)
    {
        $this->getEntityManager()->remove($entity);
        $this->getEntityManager()->flush();
    }

    /**
     * 手动刷新
     * @param null $entity
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function flush($entity = null)
    {
        $this->getEntityManager()->flush($entity);
    }

    /**
     * 更新单个记录
     * @param array $map
     * @param array $updateArr
     * @return null|object
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function updateOne($map, $updateArr = [])
    {
        $result = $this->findOneBy($map);
        if (empty($result)) return null;
        $result = $this->convert2($result, $updateArr);
        $this->getEntityManager()->flush();
        return $result;
    }

    /**
     * 如果查询条件包含了 like, eq, 等 将返回数组而不是对象
     * @param array $criteria
     * @param array|null $orderBy
     * @return array|null|object
     */
    public function findOneBy(array $criteria, array $orderBy = null)
    {
        $isStrict = true;
        $newMap = [];
        if (is_array($criteria)) {
            foreach ($criteria as $key => $val) {
                if (!is_object($val)) {
                    $newMap[StringHelper::toCamelCase($key)] = $val;
                    if (is_array($val)) {
                        $isStrict = false;
                        break;
                    }
                }
            }
        }

        if (!$isStrict) {
            $builder = $this->getEntityManager()->createQueryBuilder();
            // alias 是随便取一个，不影响
            $alias = "s.";
            if (empty($fields)) {
                $fields = $this->getEntityManager()->getClassMetadata($this->getEntityName())
                    ->getColumnNames();
            }
            // 补充字段
            for ($i = 0; $i < count($fields); $i++) {
                $fields[$i] = $alias . StringHelper::toCamelCase($fields[$i]);
            }
            $builder->select($fields)
                ->from($this->getEntityName(), rtrim($alias, "."));
            // 解析排序
            if ($orderBy) {
                foreach ($orderBy as $orderKey => $orderDir) {
                    $builder->addOrderBy($alias . $orderKey, $orderDir);
                }
            }
            $builder = $this->parseMap($criteria, $builder, $alias);
            $query = $builder->getQuery();
            $query->setMaxResults(1);
            $result = $query->getResult();
            if (is_array($result) && count($result) > 0) {
//                if (is_array($result[0])) {
//                    $result[0]['_sql'] = $query->getSQL();
//                }
                return $result[0];
            }

            return $result;
        }

        $newOrderBy = [];
        if (is_array($orderBy)) {
            foreach ($orderBy as $orderKey => $orderDir) {
                $newOrderBy[StringHelper::toCamelCase($orderKey)] = $orderDir;
            }
        }

        return parent::findOneBy($newMap, $newOrderBy); // TODO: Change the autogenerated stub
    }

    protected function parseMap(array $map, QueryBuilder $builder, $alias = '')
    {

        $num = 0;
        // 解析查询条件
        foreach ($map as $key => $vo) {
            $newKey = StringHelper::toCamelCase($key);
            $exp2 = null;
            $val2 = null;
            if (is_array($vo)) {
                // 默认2个
                $arr = $vo;
                // 针对4个参数的情况 ， 比如 time > 0 and time < 100 的条件
                if (count($vo) == 4) {
                    $exp2 = $vo[2];
                    $val2 = $vo[3];
                }
            } else {
                $arr = ['eq', $vo];
            }
            list($exp, $val) = $arr;
            if (is_string($val) && strpos($val, ".") === 0) {
                // 针对处理 字段 与 字段间比较的情况 `update_time` > `disabled_time`
                // $map['update_time'] = ['gt', '.disabled_time'];
                $comp = $builder->expr()->$exp($alias . $newKey, $alias . substr($val, 1));
                if (!empty($comp)) {
                    $builder->andWhere($comp);
                }
            } else {
                $comp = $builder->expr()->$exp($alias . $newKey, '?' . $num);
                if (!empty($comp)) {
                    $builder->andWhere($builder->expr()->andX($comp));
                    $builder->setParameter($num, $val);
                    $num++;
                }
            }
            if (!is_null($exp2) && !is_null($val2)) {
                $comp = $builder->expr()->$exp2($alias . $newKey, '?' . $num);
                if (!empty($comp)) {
                    $builder->andWhere($builder->expr()->andX($comp));
                    $builder->setParameter($num, $val2);
                    $num++;
                }
            }
        }
        return $builder;
    }

    protected function convert2($result, $updateArr)
    {
        foreach ($updateArr as $key => $vo) {
            $methodName = 'set' . StringHelper::toCamelCase($key);
            if (method_exists($result, $methodName)) {
                $result->$methodName($vo);
            }
        }
        return $result;
    }

    /**
     * 更新
     * 1. 仅支持and的条件 和 thinkphp 类似
     * @param array $map 条件
     * @param array $updateArr
     * @return mixed
     */
    public function updateWhere($map, $updateArr = [])
    {
        $builder = $this->getEntityManager()->createQueryBuilder();
        // alias 是随便取一个，不影响
        $alias = "up";
        $builder->update($this->getEntityName(), $alias);
        foreach ($map as $key => $vo) {
            $newKey = StringHelper::toCamelCase($key);
            $builder->andWhere($alias . '.' . $newKey . ' = :' . $key);
            $builder->setParameter($key, $vo);
        }
        foreach ($updateArr as $key => $vo) {
            $builder->set($alias . '.' . $key, ':' . $key);
            $builder->setParameter($key, $vo);
        }
        $query = $builder->getQuery();
        return $query->execute();
    }

    public function deleteWhere($map)
    {
        $builder = $this->getEntityManager()->createQueryBuilder();
        // alias 是随便取一个，不影响
        $alias = "del";
        $builder->delete($this->getEntityName(), $alias);
        foreach ($map as $key => $vo) {
            $newKey = StringHelper::toCamelCase($key);
            $builder->andWhere($alias . '.' . $newKey . ' = :' . $key);
            $builder->setParameter($key, $vo);
        }
        $query = $builder->getQuery();
        return $query->execute();
    }

    /**
     * @param $map
     * @param string $field
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function sum($map, string $field)
    {
        $builder = $this->getEntityManager()->createQueryBuilder();
        $field = "sum( a." . $field . ") as cnt";
        $builder->select($field)
            ->from($this->getEntityName(), "a");
        $query = $this->parseMap($map, $builder, "a.")->getQuery();
        $arr = $query->getOneOrNullResult();
        if (is_array($arr) && array_key_exists('cnt', $arr)) {
            return $arr['cnt'];
        } else {
            return -1;
        }
    }

    /**
     * 返回数组 - 包含总数
     * @param $map
     * @param PagingParams $pagingParams
     * @param array $order
     * @param array|null $fields
     * @return CallResult
     */
    public function queryAndCount($map, PagingParams $pagingParams, array $order = [], array $fields = null)
    {
        $list = $this->queryBy($map, $pagingParams, $order, $fields);
        $count = $this->enhanceCount($map);
        return CallResultHelper::success([
            'count' => $count,
            'list' => $list
        ]);
    }

    /**
     * 仅支持2层数组，以及 like, eq, lt, lte, neq, gt, gte
     * 也支持区间查询比如以下：表示 查询语句 uid = 1 expire_time > 0 and expire_time < 1000
     * ['uid' => 1, 'expire_time'=>['gt', 0, 'lt', 1000]]
     * ['gt', '.curMoney'] 带上.则为字段
     * @param array $map 过滤的条件
     * @param PagingParams $pagingParams 分页条件
     * @param array $order 键值对的数组
     * @param array $fields 查询的字段
     * @return mixed
     */
    public function queryBy($map, PagingParams $pagingParams, array $order = [], array $fields = null)
    {
        $builder = $this->getEntityManager()->createQueryBuilder();
        // alias 是随便取一个，不影响
        $alias = "s.";
        if (empty($fields)) {
            $fields = $this->getEntityManager()->getClassMetadata($this->getEntityName())
                ->getColumnNames();
        }
        // 补充字段
        for ($i = 0; $i < count($fields); $i++) {
            $fields[$i] = $alias . StringHelper::toCamelCase($fields[$i]);
        }
        $builder->select($fields)
            ->from($this->getEntityName(), rtrim($alias, "."));
        // 解析排序
        foreach ($order as $orderKey => $orderDir) {
            $builder->addOrderBy($alias . $orderKey, $orderDir);
        }
        $builder = $this->parseMap($map, $builder, $alias);
        $query = $builder->getQuery();
        $query->setFirstResult($pagingParams->getPageIndex() * $pagingParams->getPageSize());
        $query->setMaxResults($pagingParams->getPageSize());
        return $this->formatArrayResult($query->getResult());
    }

    public function formatArrayResult(array $array)
    {

        $newKeyArr = [];
        foreach ($array as $key => $subArr) {
            if (is_string($key)) {
                $newKeyArr[StringHelper::camelCaseToUnderline($key)] = $subArr;
            } elseif (is_array($subArr)) {
                foreach ($subArr as $subKey => $subVal) {
                    if (is_string($subKey)) {
                        $newKeyArr[$key][StringHelper::camelCaseToUnderline($subKey)] = $subVal;
                    } else {
                        $newKeyArr[$key][$subKey] = $subVal;
                    }
                }
            } else {
                $newKeyArr[$key] = $subArr;
            }
        }
        return $newKeyArr;
    }

    public function enhanceCount($map, $field = "id")
    {
        $builder = $this->getEntityManager()->createQueryBuilder();
        // alias 是随便取一个，不影响
        $alias = "s.";
        $builder->select('count(s.' . $field . ') as cnt')->from($this->getEntityName(), rtrim($alias, "."));
        $builder = $this->parseMap($map, $builder, $alias);
        $ret = $builder->getQuery()->execute();
        if (is_array($ret) && count($ret) > 0) {
            if (is_array($ret[0]) && array_key_exists('cnt', $ret[0])) {
                return $ret[0]['cnt'];
            }
        }
        return 0;
    }

    public function queryAllBy($map, $order = [], $fields = null)
    {
        $builder = $this->getEntityManager()->createQueryBuilder();
        // alias 是随便取一个，不影响
        $alias = "s.";
        if (empty($fields)) {
            $fields = $this->getEntityManager()->getClassMetadata($this->getEntityName())
                ->getColumnNames();
        }

        // 补充字段
        for ($i = 0; $i < count($fields); $i++) {
            $fields[$i] = $alias . StringHelper::toCamelCase($fields[$i]);
        }
        $builder->select($fields)
            ->from($this->getEntityName(), rtrim($alias, "."));
        // 解析排序
        foreach ($order as $orderKey => $orderDir) {
            $builder->addOrderBy($alias . $orderKey, $orderDir);
        }
        $query = $this->parseMap($map, $builder, $alias)->getQuery();

        return $this->formatArrayResult($query->getArrayResult());
    }
}
